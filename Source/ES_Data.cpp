//ДАННЫЕ
#include "Header.h"
#include "ES_DataBase.h"

char exitcode = 27;
char readkey;
string password = "#10595";
string label;
SBORKA temp;
SBORKA empt;
HANDLE out_handle = GetStdHandle(STD_OUTPUT_HANDLE);
COORD crd;
SMALL_RECT src;

void MainMenu() {
	cout << "************************************************************\n";
	cout << "|                            МЕНЮ                          |\n";
	cout << "************************************************************\n";
	cout << "|                                                          |\n";
	cout << "|            [D] — Режим разработчика                      |\n";
	cout << "|            [S] — Начать сборку компьютера                |\n";
	cout << "|            [V] — Просмотр комплектующих                  |\n";
	cout << "|          [ESC] — Выход из программы                      |\n";
	cout << "|                                                          |\n";
	cout << "|__________________________________________________________|\n";
}

void DevMenu() {
	cout << "************************************************************\n";
	cout << "|                       DEVELOPER MOD                      |\n";
	cout << "************************************************************\n";
	cout << "|                                                          |\n";
	cout << "|              Добавление записей в Базу Данных            |\n";
	cout << "|            ----------------------------------            |\n";
	cout << "|            [1] — Добавить материнскую плату              |\n";
	cout << "|            [2] — Добавить блок питания                   |\n";
	cout << "|            [3] — Добавить процессор                      |\n";
	cout << "|            [4] — Добавить кулер                          |\n";
	cout << "|            [5] — Добавить HDD                            |\n";
	cout << "|            [6] — Добавить видеокарту                     |\n";
	cout << "|            [7] — Добавить принтер                        |\n";
	cout << "|            [8] — Добавить корпус                         |\n";
	cout << "|            [9] — Добавить оперативную память             |\n";
	cout << "|            [0] — Добавить SSD                            |\n";
	cout << "|                                                          |\n";
	cout << "|                     Добавление правил                    |\n";
	cout << "|                    -------------------                   |\n";
	cout << "|            [P] — Посмотреть все доступные правила        |\n";
	cout << "|            [F] — Посмотреть все доступные факты          |\n";
	cout << "|                                                          |\n";
	cout << "|                                                          |\n";
	cout << "|            [M] — Выход в меню                            |\n";
	cout << "|                                                          |\n";
	cout << "|__________________________________________________________|\n";
}

void GialogMenun() {
	cout << "************************************************************\n";
	cout << "|                          СБОРКА                          |\n";
	cout << "************************************************************\n";
	cout << "|                                                          |\n";
	cout << "| В данном модуле вам будут задаваться наводящие вопросы,  |\n";
	cout << "| которые помогут программе наиболее точно составить нуж-  |\n";
	cout << "| ную вам комплектацию компьютерного оборудования.         |\n";
	cout << "|                                                          |\n";
	cout << "| Так же имейте в виду, что программа собирает только      |\n";
	cout << "| основную часть компьютера - системный блок. Остальные    |\n";
	cout << "| приспособления, такие как, например, мышка, никак не     |\n";
	cout << "| влияют на производительность системы, которую вы хотите  |\n";
	cout << "| получить.                                                |\n";
	cout << "|                                                          |\n";
	cout << "| Вы можете получить пояснение к задаваемому вопросу,      |\n";
	cout << "| если не совсем понимаете, как тот или иной ответ может   |\n";
	cout << "| повлиять на конечный результат и зачем вообще это у вас  |\n";
	cout << "| спрашивают. Для этого вам нужно нажать клавишу \"I\".      |\n";
	cout << "|__________________________________________________________|\n\n";
	cout << "               Для продолжения нажмите ENTER                \n";
	char answer = 'x';
	while (answer != 13) {
		answer = toupper(_getch());
	}
	cin.clear();
}

void DisplayMenu() {
	cout << "************************************************************\n";
	cout << "|                   ПРОСМОТР КОМПЛЕКТУЮЩИХ                 |\n";
	cout << "************************************************************\n";
	cout << "|                                                          |\n";
	cout << "|            [1] — Открыть материнские платуы              |\n";
	cout << "|            [2] — Открыть блоки питания                   |\n";
	cout << "|            [3] — Открыть процессоры                      |\n";
	cout << "|            [4] — Открыть кулеры                          |\n";
	cout << "|            [5] — Открыть HDD                             |\n";
	cout << "|            [6] — Открыть видеокарты                      |\n";
	cout << "|            [7] — Открыть принтеры                        |\n";
	cout << "|            [8] — Открыть корпусы                         |\n";
	cout << "|            [9] — Открыть оперативную память              |\n";
	cout << "|            [0] — Открыть SSD                             |\n";
	cout << "|                                                          |\n";
	cout << "|            [esc] — Выход в меню                          |\n";
	cout << "|                                                          |\n";
	cout << "|__________________________________________________________|\n";
}

void DisplayHat(string name) {
	cout << "************************************************************\n";
	cout << "|                " << name << "                |\n";
	cout << "************************************************************\n";
}

void DisplayFooter() {
	cout << " _________________________________________________________\n";
	cout << "|                |#######################|                |\n";
	cout << "|      <---      |#######################|      --->      |\n";
	cout << "|________________|#######################|________________|\n";
}

void ConfigFst(int cost) {
	cout << " _________________________________________________________\n";
	cout << "|                     МАТЕРИНСКАЯ ПЛАТА                   |\n";
	cout << "|_________________________________________________________|\n";
	temp.mb.Info();
	cout << " _________________________________________________________\n";
	cout << "|                         ПРОЦЕССОР                       |\n";
	cout << "|_________________________________________________________|\n";
	temp.proc.Info();
	cout << " _________________________________________________________\n";
	cout << "|                   КУЛЕР ДЛЯ ПРОЦЕССОРА                  |\n";
	cout << "|_________________________________________________________|\n";
	temp.fan.Info();
	cout << "                            ...                            ";

	char key = '+';
	while (key != exitcode) {
		_getch();
		key = _getch();
		if (key == 80) {
			system("cls");
			ConfigSec(cost);
			break;
		}
	}
}

void ConfigSec(int cost) {
	cout << "                            ...                            \n";
	cout << " _________________________________________________________\n";
	cout << "|                       БЛОК ПИТАНИЯ                      |\n";
	cout << "|_________________________________________________________|\n";
	cout << "Модель: " << temp.eb.GetModel() << endl;
	cout << "Цена: " << temp.eb.GetCost() << endl;
	cout << " _________________________________________________________\n";
	cout << "|                           HDD                           |\n";
	cout << "|_________________________________________________________|\n";
	temp.hdd.Info();
	cout << " _________________________________________________________\n";
	cout << "|                           SSD                           |\n";
	cout << "|_________________________________________________________|\n";
	temp.ssd.Info();
	cout << " _________________________________________________________\n";
	cout << "|                   ОПЕРАТИВНАЯ ПАМЯТЬ                    |\n";
	cout << "|_________________________________________________________|\n";
	temp.ram.Info();
	cout << "                            ...                            \n";

	char key = '+';
	while (key != exitcode) {
		_getch();
		key = _getch();
		if (key == 72) {
			system("cls");
			ConfigFst(cost);
			break;
		} 
		else if (key == 80) {
				system("cls");
				ConfigThrd(cost);
				break;
			}
	}
}

void ConfigThrd(int cost) {
	cout << "                            ...                            \n";
	cout << " _________________________________________________________\n";
	cout << "|                       ВИДЕОКАРТА                        |\n";
	cout << "|_________________________________________________________|\n";
	temp.vc.Info();
	cout << " _________________________________________________________\n";
	cout << "|                         КОРПУС                          |\n";
	cout << "|_________________________________________________________|\n";
	cout << "Модель: " << temp.box.GetModel() << endl;
	cout << "Цена: " << temp.box.GetCost() << endl;
	cout << " _________________________________________________________\n";
	cout << "|             ПРИНТЕР ИЛИ МФУ (ЕСЛИ ВЫ ВЫБРАЛИ)           |\n";
	cout << "|_________________________________________________________|\n";
	cout << "Модель: " << temp.prnt.GetModel() << endl;
	cout << "Цена: " << temp.prnt.GetCost() << endl;
	cout << " _________________________________________________________ \n";
	cout << "|                                                         |\n";
	cout << "               СУММА СБОРКИ: " << cost << " руб.\n";
	cout << "|_________________________________________________________|\n";
	cout << "|                                                         |\n";
	cout << "|                     [esc]x2 — Меню                      |\n";
	cout << "|_________________________________________________________|\n";

	char key = '+';
	while (key != exitcode) {
		_getch();
		key = _getch();
		if (key == 72) {
			system("cls");
			ConfigSec(cost);
			break;
		}
		else if (key == 80) {
			system("cls");
			ConfigThrd(cost);
			break;
		}
	}
}

void CompleteMes() {
	cout << "************************************************************\n";
	cout << "|                          СБОРКА                          |\n";
	cout << "************************************************************\n";
	cout << "|                     СБОРКА ЗАВЕРШЕНА                     |\n";
	cout << "|                                                          |\n";
	cout << "| Программа составила для вас оптимальную конфигурацию,    |\n";
	cout << "| исходя из ваших предпочтений. Далее вам будет выведен    |\n";
	cout << "| полный список комплектующих, размещённых на нескольких   |\n";
	cout << "| страницах.                                               |\n";
	cout << "|                                                          |\n";
	cout << "| Для переключения между страницами используйте кнопки     |\n";
	cout << "| \"стрелка вниз\" и \"стрелка вверх\"                         |\n";
	cout << "|                                                          |\n";
	cout << "|__________________________________________________________|\n\n";
	cout << "               Для продолжения нажмите ENTER                \n";
	char answer = 'x';
	while (answer != 13) {
		answer = toupper(_getch());
	}
	cin.clear();
}

void StartMes() {
	cout << "****************************************************************\n";
	cout << "|                                                              |\n";
	cout << "|   _$$$$___$$$$__$$___$_$$$$$__$$__$$_$$$$$$_$$$$$__$$$$$     |\n";
	cout << "|   $$__$$_$$__$$_$$$_$$_$$__$$_$$__$$___$$___$$_____$$__$$    |\n";
	cout << "|   $$_____$$__$$_$$_$_$_$$$$$__$$__$$___$$___$$$$___$$$$$     |\n";
	cout << "|   $$__$$_$$__$$_$$___$_$$_____$$__$$___$$___$$_____$$__$$    |\n";
	cout << "|   _$$$$___$$$$__$$___$_$$______$$$$____$$___$$$$$__$$__$$    |\n";
	cout << "|                                                              |\n";
	cout << "|_$$$$___$$$$___$$$$__$$$$$__$$___$_$$$$$__$$_____$$$$$__$$$$$ |\n";
	cout << "|$$__$$_$$_____$$_____$$_____$$$_$$_$$__$$_$$_____$$_____$$__$$|\n";
	cout << "|$$$$$$__$$$$___$$$$__$$$$___$$_$_$_$$$$$__$$_____$$$$___$$$$$ |\n";
	cout << "|$$__$$_____$$_____$$_$$_____$$___$_$$__$$_$$_____$$_____$$__$$|\n";
	cout << "|$$__$$__$$$$___$$$$__$$$$$__$$___$_$$$$$__$$$$$$_$$$$$__$$__$$|\n";
	cout << "|                                                              |\n";
	cout << "****************************************************************\n";
	cout << "|                                                              |\n";
	cout << "| Для корректной работы программы переключите раскладку на ENG |\n";
	cout << "|______________________________________________________________|\n\n";
	cout << "                 Для продолжения нажмите ENTER                  \n";
	char answer = 'x';
	while (answer != 13) {
		answer = toupper(_getch());
	}
	cin.clear();
	system("cls");
}

void WARNING() {
	cout << "************************************************************\n";
	cout << "|                    РЕЖИМ РАЗРАБОТЧИКА                    |\n";
	cout << "************************************************************\n";
	cout << "|                         ВНИМАНИЕ!                        |\n";
	cout << "|                                                          |\n";
	cout << "| В режиме разработчика ОСОБОЕ ВНИМАНИЕ нужно уделить      |\n";
	cout << "| ФУНКЦИИ ДОБАВЛЕНИЯ новых комплектующих в базу данных.    |\n";
	cout << "| Если вы воспользуетесь данной функцией, ни в коем случае |\n";
	cout << "| не закрывайте программу! Если вы запустили добавление    |\n";
	cout << "| случайно, заполните все поля пустыми строками, а после   |\n";
	cout << "| найдите файл данного комплектующего в папке DataBase     |\n";
	cout << "| и удалите в нём последний экземпляр так, чтобы каретка   |\n";
	cout << "| в итоге стояла после последней цифры предыдущего         |\n";
	cout << "| экземпляра, иначе вы РИСКУЕТЕ ВЫВЕСТИ ИЗ СТРОЯ всю       |\n";
	cout << "| СИСТЕМУ.                                                 |\n";
	cout << "|                                                          |\n";
	cout << "|__________________________________________________________|\n\n";
	cout << "               Для продолжения нажмите ENTER                \n";
	char answer = 'x';
	while (answer != 13) {
		answer = toupper(_getch());
	}
	cin.clear();
}

/////////////////////////////////////////////////////////////////////////////////////////////////
//      БАЗОВЫЕ УСТАНОВКИ      //////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void Office(SBORKA &temp) {
	//Материнская плата
	temp.mb.MemType = "DDR4";
	temp.mb.MemSlots = 2;
	temp.mb.PCI_Ex16 = 1;
	temp.mb.SetCost(5000);
	//Процессор
	temp.proc.Core_Num = 4;
	temp.proc.Cache = 4;
	temp.proc.Flows_Num = 4;
	temp.proc.SetCost(5000);
	//Кулер
	temp.fan.SetCost(500);
	//Оперативная память
	temp.ram.Capacity = 4;
	temp.ram.SetCost(2000);
	temp.ram.Freq = 2400;
	//ROM
	temp.hdd.Capacity = 500;
	temp.hdd.SetCost(3000);
	temp.ssd.Capacity = 120;
	temp.ssd.SetCost(4000);
	temp.ssd.TypeChipMem = "TLC";
	//Блок питания
	temp.eb.Power = 450;
	//Видеокарта
	temp.vc.Capacity = 2;
	temp.vc.GPUFreq = 1000;
	temp.vc.SetCost(4500);
}

void Internet(SBORKA& temp) {
	//Материнская плата
	temp.mb.MemType = "DDR3";
	temp.mb.MemSlots = 2;
	temp.mb.PCI_Ex16 = 1;
	temp.mb.SetCost(3800);
	//Процессор
	temp.proc.Core_Num = 2;
	temp.proc.Flows_Num = 4;
	temp.proc.Cache = 2;
	temp.proc.SetCost(3000);
	//Кулер
	temp.fan.SetCost(500);
	//Оперативная память
	temp.ram.Capacity = 2;
	temp.ram.SetCost(2000);
	temp.ram.Freq = 900;
	//ROM
	temp.hdd.Capacity = 500;
	temp.hdd.SetCost(4000);
	temp.ssd.Capacity = 120;
	temp.ssd.TypeChipMem = "MLC";
	temp.ssd.SetCost(4000);
	//Корпус
	temp.box.SetCost(1800);
	//Блок питания
	temp.eb.Power = 450;
	//Видеокарта
	temp.vc.Capacity = 1;
	temp.vc.GPUFreq = 1000;
	temp.vc.SetCost(3200);
}

void Graphic(SBORKA& temp) {
	//Материнская плата
	temp.mb.MemType = "DDR4";
	temp.mb.MemSlots = 4;
	temp.mb.PCI_Ex16 = 1;
	temp.mb.SetCost(6500);
	//Процессор
	temp.proc.Core_Num = 4;
	temp.proc.Flows_Num = 6;
	temp.proc.Cache = 32;
	temp.proc.SetCost(17000);
	//Кулер
	temp.fan.SetCost(4000);
	//Оперативная память
	temp.ram.Capacity = 16;
	temp.ram.SetCost(19000);
	temp.ram.Freq = 3500;
	//ROM
	temp.ssd.Capacity = 256;
	temp.ssd.TypeChipMem = "MLC";
	temp.ssd.SetCost(9000);
	//Блок питания
	temp.eb.Power = 700;
	//Видеокарта
	temp.vc.Capacity = 6;
	temp.vc.GPUFreq = 1500;
	temp.vc.SetCost(30000);
}

void Program(SBORKA& temp) {
	//Материнская плата
	temp.mb.MemType = "DDR4";
	temp.mb.MemSlots = 4;
	temp.mb.PCI_Ex16 = 1;
	temp.mb.SetCost(6500);
	//Процессор
	temp.proc.Core_Num = 4;
	temp.proc.Flows_Num = 6;
	temp.proc.Cache = 32;
	temp.proc.SetCost(17000);
	//Кулер
	temp.fan.SetCost(4000);
	//Оперативная память
	temp.ram.Capacity = 16;
	temp.ram.SetCost(19000);
	temp.ram.Freq = 3000;
	//ROM
	temp.ssd.Capacity = 120;
	temp.ssd.TypeChipMem = "MLC";
	temp.ssd.SetCost(5500);
	//Блок питания
	temp.eb.Power = 700;
	//Видеокарта
	temp.vc.Capacity = 4;
	temp.vc.GPUFreq = 1200;
	temp.vc.SetCost(15000);
}

void Game(SBORKA& temp) {
	//Материнская плата
	temp.mb.MemType = "DDR4";
	temp.mb.MemSlots = 4;
	temp.mb.PCI_Ex16 = 1;
	temp.mb.SetCost(6500);
	//Процессор
	temp.proc.Core_Num = 4;
	temp.proc.Flows_Num = 6;
	temp.proc.Cache = 2;
	temp.proc.SetCost(17000);
	//Кулер
	temp.fan.SetCost(4000);
	//Оперативная память
	temp.ram.Capacity = 16;
	temp.ram.SetCost(19000);
	temp.ram.Freq = 3000;
	//ROM
	temp.hdd.Capacity = 1024;
	temp.hdd.SetCost(3500);
	temp.ssd.Capacity = 256;
	temp.ssd.TypeChipMem = "MLC";
	temp.ssd.SetCost(9000);
	//Блок питания
	temp.eb.Power = 700;
	//Видеокарта
	temp.vc.Capacity = 6;
	temp.vc.GPUFreq = 1100;
	temp.vc.SetCost(15000);
}